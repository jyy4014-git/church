1. 사용자 시나리오 (수정 버전)
단일 이미지 기반 전체 교회 지도 탐색 + 개선 기능
앱 실행 및 메뉴 선택

사용자는 앱 실행 후 메인 메뉴에서 교회 장소 찾기를 선택한다.
메인 지도 화면 표시 (전체 지도 이미지 + 최적화 적용)

앱은 모든 층이 포함된 고해상도 단일 지도 이미지를 불러온다.
이미지 타일링 또는 점진적 로딩(progressive loading)을 통해 큰 파일도 빠르게 로딩되며, 캐싱(CDN, Redis)을 이용하여 반복 조회 시 빠른 로딩을 보장한다.
검색 기능 및 필터링 개선

상단 검색창에서는 자동 완성 기능을 제공하여 사용자가 입력하는 동안 추천 장소명이나 키워드를 표시한다.
최근 검색 기록을 저장해, 사용자가 이전에 검색한 장소를 쉽게 재조회할 수 있도록 한다.
카테고리 필터(예: 예배실, 기도실 등)를 통해 원하는 장소만 빠르게 하이라이트 처리한다.
인터랙티브 핫스팟 및 상세 정보 조회

지도 내 사전 정의된 핫스팟 영역을 터치하면, 해당 장소에 대한 간단한 정보가 팝업으로 나타난다.
사용자가 팝업 또는 아이콘을 선택하면, 상세 정보 화면(사진, 설명, 내부 경로 안내 등)으로 전환된다.
줌 및 패닝 기능

핀치 줌, 드래그 등 제스처를 통해 지도 내 특정 구역(특정 층, 장소 등)을 확대하여 상세하게 볼 수 있다.
즐겨찾기 등록 및 경로 안내

상세 정보 화면에서 즐겨찾기 등록 기능을 제공하여, 관심 장소를 저장하고 추후 빠르게 접근할 수 있다.
필요 시 ‘길찾기’ 버튼을 통해 실내 네비게이션 경로를 안내받는다.
2. 시스템 아키텍처 설계 (수정 버전)
A. 전체 시스템 개요 (교회 장소 찾기 – 단일 이미지 기반 + 최적화)
사용자 기기 (모바일 앱)

iOS/Android 앱: 단일 통합 지도 이미지를 보여주며, 이미지 타일링/점진적 로딩 기능과 줌/패닝을 지원
자동 완성 및 최근 검색 기록 기능을 포함한 검색 인터페이스 제공
프론트엔드

모바일 앱 UI:
단일 고해상도 지도 이미지 뷰어 (예: OpenSeadragon, Fabric.js 또는 기본 제공 이미지 뷰어 활용)
인터랙티브 핫스팟 오버레이(터치 영역, 확대 효과 포함)
검색창에 자동 완성 및 최근 검색 기록 기능 구현
검색 컴포넌트:
사용자가 입력하는 동안 실시간 추천(자동 완성) 기능 및 과거 검색 기록 표시
백엔드

API 서버:
지도 이미지와 핫스팟 데이터(좌표, 장소 정보)를 제공
검색어 자동 완성과 최근 검색 기록 기능에 필요한 데이터 처리 API 제공
RESTful API 방식으로 장소 상세 정보, 즐겨찾기 등록, 검색 결과 반환
실시간 기능:
필요 시 WebSocket을 이용해 실시간 업데이트(예: 지도 변경 사항, 이벤트 알림 등) 제공
데이터베이스

관계형 DB:
교회 내부 장소 정보(이름, 설명, 좌표, 층 정보 등), 고해상도 지도 이미지 메타데이터 저장
검색 기록 및 자동 완성 추천 데이터를 저장하기 위한 테이블 추가
캐싱 계층:
Redis와 CDN을 통해 고해상도 지도 이미지와 자주 조회되는 핫스팟 데이터를 캐싱하여 빠른 응답 제공
외부 API 연동

지도 이미지 및 경로 안내:
고해상도 이미지의 타일링 제공, CDN을 통한 빠른 전송 지원
검색 자동 완성 API (필요 시):
키워드 기반 추천 및 최근 검색 기록 제공을 위한 별도 검색 모듈 또는 외부 서비스 연동
B. 아키텍처 다이어그램 (텍스트 기반 – 수정)
         ┌─────────────────────────────┐
         │       사용자 기기 (앱)       │
         │  (모바일: iOS/Android)      │
         └──────────────┬──────────────┘
                        │
            ┌───────────┴────────────┐
            │   프론트엔드 애플리케이션   │
            │  (UI: 단일 지도 이미지,     │
            │   핫스팟 오버레이, 검색 등)  │
            └───────────┬────────────┘
                        │ RESTful API / WebSocket
            ┌───────────┴────────────┐
            │     백엔드 API 서버      │
            │ (지도, 핫스팟, 검색,       │
            │  즐겨찾기 데이터 제공)    │
            └───────────┬────────────┘
                        │
         ┌──────────────┴─────────────┐
         │      관계형 데이터베이스     │
         │ (장소 정보, 지도 메타데이터,  │
         │  검색 기록 등 저장)          │
         └──────────────┬─────────────┘
                        │
         ┌──────────────┴─────────────┐
         │  캐싱 계층 (Redis, CDN)      │
         │  (고해상도 지도 이미지,       │
         │   핫스팟 데이터 캐싱)        │
         └─────────────────────────────┘
3. UI/UX 디자인 초안 (수정 버전)
A. 기본 화면 구성 및 사용자 흐름
메인 지도 화면 (통합 지도 이미지 + 최적화 적용)

상단 헤더:
앱 로고, 페이지 타이틀 (예: "교회 장소 찾기")
검색창: 자동 완성 기능 및 최근 검색 기록 표시
사용자가 텍스트를 입력하면 추천 검색어가 드롭다운으로 나타남
카테고리 필터 버튼(예: 예배실, 기도실 등)
중앙 영역:
통합 지도 이미지: 단일 고해상도 이미지에 모든 층이 포함되어 있으며, 타일링 또는 점진적 로딩을 통해 빠르게 로딩됨
인터랙티브 핫스팟: 터치 가능한 영역이 지도 위에 오버레이되어 있으며, 터치 시 확대 효과 및 시각적 피드백 제공
하단 네비게이션:
홈, 검색, 즐겨찾기, 설정 등의 아이콘
세부 정보 화면

상단 헤더:
뒤로가기 버튼 및 장소명 표시
내용 영역:
장소 상세 이미지 또는 확대된 지도 영역
장소 이름, 설명, 내부 경로 안내, 이용 시간 등
액션 버튼:
‘길찾기’ (실내 네비게이션 경로 안내)
‘즐겨찾기 등록’ 버튼
검색 및 필터 모달

검색 모달:
자동 완성 기능과 최근 검색 기록이 포함된 검색 입력창
선택된 검색어나 필터에 따라 지도 내 해당 핫스팟만 하이라이트 처리
결과 목록:
검색 결과 목록 팝업 형태로 표시, 터치 시 세부 정보 화면으로 전환
B. 와이어프레임 개요 (텍스트 기반 – 수정)
[메인 지도 화면]

┌─────────────────────────────────────┐
│         교회 장소 찾기              │  <- 헤더 (앱 로고, 검색창 [자동완성/최근 검색], 필터)
├─────────────────────────────────────┤
│       [통합 지도 이미지]             │
│ ┌───────────────────────────────┐   │
│ │                           ●   │   │
│ │   (모든 층 포함, 타일링/   ●   │   │
│ │    점진적 로딩 적용)          │   │
│ └───────────────────────────────┘   │
├─────────────────────────────────────┤
│   하단 네비게이션 (홈, 검색, 즐겨찾기, 설정)  │
└─────────────────────────────────────┘
[세부 정보 화면]

┌─────────────────────────────────────┐
│       [뒤로가기]  예배실 A           │  <- 헤더 (장소명)
├─────────────────────────────────────┤
│   [장소 상세 이미지 또는 확대 지도]  │
├─────────────────────────────────────┤
│  예배실 A                           │
│  - 주 예배 및 소그룹 모임 공간       │
│  - 이용 시간: 09:00 - 18:00          │
│  - 상세 안내: 출입구, 인접 시설 등    │
├─────────────────────────────────────┤
│    [길찾기]   [즐겨찾기 등록]         │  <- 액션 버튼
└─────────────────────────────────────┘
4. API 명세 (수정 버전)
GET /api/church/map

설명: 단일 통합 지도 이미지와 핫스팟 데이터(좌표, 이름, 카테고리, 간단 정보)를 반환
요청 파라미터:
search (옵션, 텍스트 검색 필터)
category (옵션, 예: "예배실", "기도실" 등)
응답 예시:
{
  "map_image_url": "https://example.com/church_full_map.jpg",
  "hotspots": [
    {
      "id": 101,
      "name": "예배실 A",
      "category": "예배실",
      "floor": "1층",
      "coordinates": {"x": 120, "y": 340},
      "thumbnail": "https://example.com/images/예배실A_thumb.jpg"
    },
    {
      "id": 102,
      "name": "기도실",
      "category": "기도실",
      "floor": "2층",
      "coordinates": {"x": 220, "y": 140},
      "thumbnail": "https://example.com/images/기도실_thumb.jpg"
    }
  ]
}
GET /api/church/locations/{id}

설명: 선택한 핫스팟(장소)의 상세 정보 조회
경로 변수:
id: 장소 식별자
응답 예시:
{
  "id": 101,
  "name": "예배실 A",
  "floor": "1층",
  "category": "예배실",
  "description": "주 예배 및 소그룹 모임 공간입니다. 좌석 배치, 스크린 위치 등의 세부 정보 포함.",
  "coordinates": {"x": 120, "y": 340},
  "directions": "입구에서 오른쪽 20미터 후 좌회전",
  "image_url": "https://example.com/images/예배실A.jpg"
}
POST /api/church/locations/{id}/bookmark

설명: 사용자가 특정 장소를 즐겨찾기에 등록
요청 본문:
{
  "user_id": 501
}
응답 예시:
{
  "message": "즐겨찾기에 등록되었습니다.",
  "bookmark_id": 3001
}
GET /api/church/search

설명: 자동 완성 및 최근 검색 기록 기능을 위한 검색 API
요청 파라미터:
query: 사용자가 입력하는 텍스트
응답 예시:
{
  "suggestions": ["예배실 A", "기도실", "휴게실"],
  "recent_searches": ["기도실", "예배실"]
}


5. 데이터베이스 스키마 (최종 버전)

-- 1.1. 사용자 (Users) 테이블
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    cell_no VARCHAR(20) UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    role_id INTEGER REFERENCES roles(id) DEFAULT 2,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- 1.2. 권한 (Roles) 테이블
CREATE TABLE roles (
    id SERIAL PRIMARY KEY,
    name VARCHAR(50) NOT NULL UNIQUE
);

-- 1.3. 지도 정보 (ChurchMap) 테이블
CREATE TABLE church_map (
    id SERIAL PRIMARY KEY,
    map_image_url TEXT NOT NULL,
    building_id INTEGER REFERENCES buildings(id),
    description TEXT,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- 1.4. 장소 (Locations) 테이블 수정 (비율 좌표로 변경)
CREATE TABLE locations (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    category VARCHAR(50) NOT NULL,
    floor VARCHAR(10) NOT NULL,
    x_ratio DECIMAL(5,4) NOT NULL,  -- 이미지 가로 비율 (0.0000 ~ 1.0000)
    y_ratio DECIMAL(5,4) NOT NULL,  -- 이미지 세로 비율 (0.0000 ~ 1.0000)
    thumbnail_url TEXT,
    detail_image_url TEXT,
    directions TEXT,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- 기존 픽셀 좌표 → 비율 좌표 마이그레이션 예시 (이미지 크기 1920x1080 가정)
UPDATE locations 
SET 
    x_ratio = CAST(coord_x AS DECIMAL) / 1920,
    y_ratio = CAST(coord_y AS DECIMAL) / 1080;


-- 1.5. 즐겨찾기 (Bookmarks) 테이블
CREATE TABLE bookmarks (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    location_id INTEGER NOT NULL REFERENCES locations(id) ON DELETE CASCADE,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id, location_id)
);

-- 1.6. 검색 기록 (SearchHistory) 테이블
CREATE TABLE search_history (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    query TEXT NOT NULL,
    expires_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP + INTERVAL '30 days',
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- 1.7. 빌딩 정보 (Buildings) 테이블
CREATE TABLE buildings (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    map_image_url TEXT NOT NULL
);

-- 1.8. 경로 정보 (Pathways) 테이블
CREATE TABLE pathways (
    id SERIAL PRIMARY KEY,
    from_location_id INTEGER REFERENCES locations(id),
    to_location_id INTEGER REFERENCES locations(id),
    path_description TEXT,
    distance_metric INTEGER
);

-- 1.9. 감사 로그 (AuditLogs) 테이블
CREATE TABLE audit_logs (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id),
    action_type VARCHAR(50) NOT NULL,
    target_id INTEGER,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- 인덱스 생성
CREATE INDEX idx_locations_category ON locations(category);
CREATE INDEX idx_locations_floor ON locations(floor);
CREATE INDEX idx_search_history_query ON search_history(query);



프론트엔드 구현 가이드

세로 모드 고정

Android: AndroidManifest.xml에서 액티비티 설정 추가

xml
Copy
<activity 
    android:name=".MainActivity"
    android:screenOrientation="portrait" />
Run HTML
iOS: Xcode 프로젝트 설정 → Device Orientation → Portrait만 체크

비율 좌표 → 실제 픽셀 변환 로직

javascript
Copy
// 예시: React Native 기준
const getPixelPosition = (ratioX, ratioY, imageWidth, imageHeight) => {
    return {
        x: ratioX * imageWidth,
        y: ratioY * imageHeight
    };
};
반응형 지도 이미지 구현

이미지를 width: 100%, height: auto로 설정하여 세로 스크롤 가능하도록 구성.

핫스팟 위치 계산 시 이미지 실제 렌더링 크기를 동적으로 측정 후 적용.